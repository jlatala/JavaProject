package agh.project;
import java.io.IOException;
import java.sql.ResultSet;
import java.util.List;
import java.util.Vector;

import agh.project.SQLite;

import javax.swing.DefaultListSelectionModel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import javax.swing.ScrollPaneConstants;

/**
 *
 * @author Benjamin
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        //System.out.println("dupa");
    }


    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

		MaxW = 0.0;
		MinW = 180.0;
		MaxE = 0.0;
		MinE = 180.0;
    	
    	String TmpText = new String("");
    	DataBase.Content = new SQLite();
		Downloader.readSettings();
		DownloaderPool.DownloadedContent = new String[Downloader.Website.size()];
		//while(!DownloaderPool.Done);
	
		//DataBase.Content = new SQLite();
		//SQLite.run(DataBase.Content);
		

		//List<Satellites> satellite = DataBase.Content.selectSatellites();
		
		//for(Satellites sat: satellite)
			//TmpText+=sat+"\n";
		//System.out.println(HugeText);
		//HugeText = "Benjamin";
    	
    	
    	
    	
        buttonGroup1 = new javax.swing.ButtonGroup();
        DownloadButton = new javax.swing.JButton();
        TextField = new javax.swing.JTextArea();
        TextFieldScroll = new JScrollPane(TextField);
        ComboBox = new javax.swing.JComboBox();
        ShowButton = new javax.swing.JButton();
        ESlider = new javax.swing.JSlider();
        WSlider = new javax.swing.JSlider();
        //jLabel1 = new javax.swing.JLabel();
        //jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        UrlList = new javax.swing.JList();
        DeleteDB = new javax.swing.JButton();
        RadioButtonW1 = new javax.swing.JRadioButton();
        RadioButtonW2 = new javax.swing.JRadioButton();
        RadioButtonE1 = new javax.swing.JRadioButton();
        RadioButtonE2 = new javax.swing.JRadioButton();
        

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        DownloadButton.setText("Download");
        DownloadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DownloadButtonMouseClicked(evt);
            }
        });

        TextField.setColumns(2);
        TextField.setText(TmpText);
        TextField.setEditable(false);
        TextField.setLineWrap(true);
        TextFieldScroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        TextFieldScroll.setViewportView(TextField);
        
		RadioButtonW1.setSelected(true);
		RadioButtonE1.setSelected(false);
		RadioButtonW2.setSelected(false);
		RadioButtonE2.setSelected(true);
		
		WSlider.setMinimum(MinW.intValue());
		WSlider.setMaximum(MaxW.intValue());
		WSlider.setMajorTickSpacing((new Double(((MinW.intValue()+MaxW.intValue())/5))).intValue());
		WSlider.setMinorTickSpacing((new Double(((MinW.intValue()+MaxW.intValue())/25))).intValue());
		WSlider.setPaintTicks(true);
		WSlider.setPaintLabels(true);
		//tmpxxx = (new Double(((MinE.intValue()+MaxE.intValue())/10))).intValue();
		ESlider.setMinimum(MinE.intValue());
		ESlider.setMaximum(MaxE.intValue());
		
		ESlider.setMajorTickSpacing((new Double(((MinE.intValue()+MaxE.intValue())/5))).intValue());
		WSlider.setMinorTickSpacing((new Double(((MinE.intValue()+MaxE.intValue())/25))).intValue());
		ESlider.setPaintTicks(true);
		ESlider.setPaintLabels(true);
        //TextField.addActionListener(new java.awt.event.ActionListener() {
           // public void actionPerformed(java.awt.event.ActionEvent evt) {
            //    TextFieldActionPerformed(evt);
            //}
        //});

        ComboBox.setEditable(true);
        ComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Download from web", "Make local files" }));

        ShowButton.setText("Show");
        ShowButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ShowButtonMouseClicked(evt);
            }
        });

        RadioButtonW1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
            	RadioButtonW1ButtonMouseClicked(evt);
            }
        });
        
        RadioButtonE1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
            	RadioButtonE1ButtonMouseClicked(evt);
            }
        });
        
        RadioButtonW2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
            	RadioButtonW2ButtonMouseClicked(evt);
            }
        });
        
        RadioButtonE2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
            	RadioButtonE2ButtonMouseClicked(evt);
            }
        });
        
       // jLabel1.setText("E");

        //jLabel2.setText("W");

        Vector<String> Urls = new Vector<String>();
        String ListStrings[] = new String[Downloader.Website.size()];
        Downloader.DoTry = new Boolean[Downloader.Website.size()];
        for (int i=0; i<Downloader.Website.size();i++)
        {
        	Urls.add(new String(Downloader.Website.get(i).toString()));
        	Downloader.DoTry[i]=true;
        }
        Urls.toArray(ListStrings);

        
        
        
        UrlList.setModel(new javax.swing.AbstractListModel() {
        	String[] strings = ListStrings;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        
        UrlList.setSelectionModel(new DefaultListSelectionModel() {
            @Override
            public void setSelectionInterval(int index0, int index1) {
                if(super.isSelectedIndex(index0)) {
                    super.removeSelectionInterval(index0, index1);
                }
                else {
                    super.addSelectionInterval(index0, index1);
                }
            }
        });
        
        
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {              
            	DataBase.Close();
            	System.exit(0);           
            }
        });
        
        
        jScrollPane1.setViewportView(UrlList);
        
        
        
        DeleteDB.setText("Delete DB");
        DeleteDB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeleteDBMouseClicked(evt);
            }
        });

        RadioButtonW1.setText("W");

        RadioButtonW2.setText("W");

        RadioButtonE1.setText("E");

        RadioButtonE2.setText("E");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TextFieldScroll)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(ESlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(WSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(ShowButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(DeleteDB, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(RadioButtonW1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RadioButtonE1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(RadioButtonW2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RadioButtonE2)))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DownloadButton, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)))
                    .addComponent(ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RadioButtonW1)
                            .addComponent(RadioButtonE1))
                        .addGap(2, 2, 2)
                        .addComponent(WSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RadioButtonW2)
                            .addComponent(RadioButtonE2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ESlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteDB)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DownloadButton)
                    .addComponent(ShowButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void TextFieldActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void ShowButtonMouseClicked(java.awt.event.MouseEvent evt) {                                        
        // TODO add your handling code here:
    	
    	
    		TextField.setText("DDD");

    		GetMin = WSlider.getValue();
    		GetMax = ESlider.getValue();
    		String Command = new String();
    		TextField.setText(GetMin.toString());
    		if (RadioButtonW1.isSelected() && RadioButtonW2.isSelected())
    		{
    			Command = "SELECT * FROM satellites WHERE (EW='W' AND Coordinates <"+GetMax.toString()+" AND Coordinates >"+GetMin.toString()+")";
    		}
    		else if (RadioButtonW1.isSelected() && RadioButtonE2.isSelected())
    		{
    			Command = "SELECT * FROM satellites WHERE (EW='W' AND Coordinates >"+GetMin.toString()+") OR ( EW='E' AND Coordinates <"+GetMax.toString()+")";
    		}
    		else if (RadioButtonE1.isSelected() && RadioButtonE2.isSelected())
    		{
    			Command = "SELECT * FROM satellites WHERE (EW='E' AND Coordinates <"+GetMax.toString()+" AND Coordinates >"+GetMin.toString()+")";
    		}
    		else
    		{
    			TextField.setText("Error");
    		}

    		List<Satellites> satellite = DataBase.Content.selectSatellites(Command);
    		String tmp = new String();
    		Satellites TmpSat = satellite.get(0);

    		
    		for(Satellites sat: satellite)
    		{
    			tmp+=sat+"\n";
    		}
    		
        	TextField.setText(tmp);
    		
    		
    }                                       

    private void RadioButtonW1ButtonMouseClicked(java.awt.event.MouseEvent evt) {                                        
        // TODO add your handling code here:
    	if (RadioButtonE1.isSelected())
    		RadioButtonE1.setSelected(false);
		WSlider.setMinimum(MinW.intValue());
		WSlider.setMaximum(MaxW.intValue());
		WSlider.setMajorTickSpacing((new Double(((MinW.intValue()+MaxW.intValue())/5))).intValue());
		WSlider.setMinorTickSpacing((new Double(((MinW.intValue()+MaxW.intValue())/25))).intValue());
		WSlider.setPaintTicks(true);
		WSlider.setPaintLabels(true);
    	
    	
    }    
    
    private void RadioButtonE1ButtonMouseClicked(java.awt.event.MouseEvent evt) {                                        
        // TODO add your handling code here:
    	if (RadioButtonW1.isSelected())
    		RadioButtonW1.setSelected(false);
    	
		WSlider.setMinimum(MinE.intValue());
		WSlider.setMaximum(MaxE.intValue());	
		WSlider.setMajorTickSpacing((new Double(((MinE.intValue()+MaxE.intValue())/5))).intValue());
		WSlider.setMinorTickSpacing((new Double(((MinE.intValue()+MaxE.intValue())/25))).intValue());
		WSlider.setPaintTicks(true);
		WSlider.setPaintLabels(true);
    } 
    
    private void RadioButtonW2ButtonMouseClicked(java.awt.event.MouseEvent evt) {                                        
        // TODO add your handling code here:
    	if (RadioButtonE2.isSelected())
    		RadioButtonE2.setSelected(false);
		ESlider.setMinimum(MinW.intValue());
		ESlider.setMaximum(MaxW.intValue());
		ESlider.setMajorTickSpacing((new Double(((MinW.intValue()+MaxW.intValue())/5))).intValue());
		ESlider.setMinorTickSpacing((new Double(((MinW.intValue()+MaxW.intValue())/25))).intValue());
		ESlider.setPaintTicks(true);
		ESlider.setPaintLabels(true);
    } 
    
   private void RadioButtonE2ButtonMouseClicked(java.awt.event.MouseEvent evt) {                                        
        // TODO add your handling code here:
   	if (RadioButtonW2.isSelected())
		RadioButtonW2.setSelected(false);
   	
	ESlider.setMinimum(MinE.intValue());
	ESlider.setMaximum(MaxE.intValue());
	
	ESlider.setMajorTickSpacing((new Double(((MinE.intValue()+MaxE.intValue())/5))).intValue());
	ESlider.setMinorTickSpacing((new Double(((MinE.intValue()+MaxE.intValue())/25))).intValue());
	ESlider.setPaintTicks(true);
	ESlider.setPaintLabels(true);
   	
   	
    } 
    
    private void DownloadButtonMouseClicked(java.awt.event.MouseEvent evt) {                                            
        // TODO add your handling code here:
    	//DownloaderPool.DownloadedContent=null;
    	for (int i=0; i<Downloader.Website.size();i++)
    	{
    		DownloaderPool.Done=false;
    		DownloaderPool.DownloadedContent[i]="";
    		Downloader.DoTry[i] = UrlList.isSelectedIndex(i);
    	}
    	
		try {
			DownloaderPool.run();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		while(!DownloaderPool.Done);
		//TextField.setText(DownloaderPool.DownloadedContent[0]);
		SQLite.run(DataBase.Content);
		List<Satellites> satellite = DataBase.Content.selectSatellites("SELECT * FROM satellites");
		String tmp = new String();
		Satellites TmpSat = satellite.get(0);

		
		for(Satellites sat: satellite)
		{
			tmp+=sat+"\n";
			if (sat.EW.equals("W"))
			{
				if(sat.Coordinates>MaxW)
					MaxW=sat.Coordinates;
				else if (sat.Coordinates<MinW)
					MinW=sat.Coordinates;
			}
			else if(sat.EW.equals("E"))
			{
				if(sat.Coordinates>MaxE)
					MaxE=sat.Coordinates;
				else if (sat.Coordinates<MinE)
					MinE=sat.Coordinates;
			}
		}
		//Integer tmpxxx = (new Double(((MinW.intValue()+MaxW.intValue())/5))).intValue();
		WSlider.setMinimum(MinW.intValue());
		WSlider.setMaximum(MaxW.intValue());
		WSlider.setMajorTickSpacing((new Double(((MinW.intValue()+MaxW.intValue())/5))).intValue());
		WSlider.setMinorTickSpacing((new Double(((MinW.intValue()+MaxW.intValue())/25))).intValue());
		WSlider.setPaintTicks(true);
		WSlider.setPaintLabels(true);
		//tmpxxx = (new Double(((MinE.intValue()+MaxE.intValue())/10))).intValue();
		ESlider.setMinimum(MinE.intValue());
		ESlider.setMaximum(MaxE.intValue());
		
		ESlider.setMajorTickSpacing((new Double(((MinE.intValue()+MaxE.intValue())/5))).intValue());
		ESlider.setMinorTickSpacing((new Double(((MinE.intValue()+MaxE.intValue())/25))).intValue());
		ESlider.setPaintTicks(true);
		ESlider.setPaintLabels(true);
		
		
			
			

		TextField.setText(tmp);
		
		//ResultSet result = stat.executeQuery(Command)
		
		//Satellites S1 = new Sattelites();
		
		
		//System.out.println(HugeText);
		//HugeText = "Benjamin";
		//while (HugeText ==null);	
    }     
    
    private void DeleteDBMouseClicked(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
    }                                     

    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JComboBox ComboBox;
    private javax.swing.JButton DownloadButton;
    private javax.swing.JSlider ESlider;
    private javax.swing.JButton ShowButton;
    private javax.swing.JTextArea TextField;
    private javax.swing.JScrollPane TextFieldScroll;
    private javax.swing.JList UrlList;
    private javax.swing.JSlider WSlider;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton DeleteDB;
    private javax.swing.JRadioButton RadioButtonE2;
    private javax.swing.JRadioButton RadioButtonW1;
    private javax.swing.JRadioButton RadioButtonW2;
    private javax.swing.JRadioButton RadioButtonE1;
    private Double MinE;
    private Double MaxE;
    private Double MinW;
    private Double MaxW;
    private Integer GetMin;
    private Integer GetMax;

    // End of variables declaration                   
}
